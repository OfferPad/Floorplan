// mixins used generally across all sass files go here.
// if a mixin is specific to one sass file, place it in that file instead.

@mixin bp-mobile-large {
    @media (min-width: #{$bp-mobile-large}) {
        @content;
    }
}
@mixin bp-tablet {
    @media (min-width: #{$bp-tablet}) {
        @content;
    }
}
@mixin bp-desktop {
    @media (min-width: #{$bp-desktop}) {
        @content;
    }
}
@mixin bp-desktop-large {
    @media (min-width: #{$bp-desktop-large}) {
        @content;
    }
}


@mixin bp-navigation {
    @media (min-width: #{$bp-desktop}) {
        @content;
    }
}

@mixin container($width: none) {
    padding-left: $content-padding;
    padding-right: $content-padding;
    @if $width == normal {
        @include bp-tablet {
            padding-left: calc(50% - (#{$content-width} * 0.5));
            padding-right: calc(50% - (#{$content-width} * 0.5));
        }
    }
    @if $width == small {
        @include bp-mobile-large {
            padding-left: calc(50% - (#{$content-width-small} * 0.5));
            padding-right: calc(50% - (#{$content-width-small} * 0.5));
        }
    }
    @if $width == large {
        @include bp-desktop-large {
            padding-left: calc(50% - (#{$content-width-large} * 0.5));
            padding-right: calc(50% - (#{$content-width-large} * 0.5));
        }
    }
}

@mixin hover {
    &:hover {
        @content;
    }
}

@mixin hover-focus {
    &:focus,
    &:hover {
        @content;
    }
}

// Color contrast via bootstrap
@mixin color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= 150) {
      color: op-color('black');
  } @else {
      color: op-color('white');
  }
}

@mixin op-gradient($color, $direction: 180deg) {
    $sat: saturation($color);
    @if ($sat >= 15) {
        $color-light-adjust: adjust-hue($color, 12deg);
        $color-dark-adjust: adjust-hue($color, -12deg);
        background-image: linear-gradient($direction, $color-light-adjust, $color-dark-adjust);
    } @else {
        $color-light-adjust: lighten($color, 5%);
        $color-dark-adjust: darken($color, 5%);
        background-image: linear-gradient($direction, $color-light-adjust, $color-dark-adjust);
    }
    background-color: $color;
    background-repeat: repeat-x;
}

// https://gist.github.com/paulmelnikow/7fcfbe4f68e5df7fe326
@mixin box_shadow ($level) {
    @if $level == 1 {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    } @else if $level == 2 {
        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    } @else if $level == 3 {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    } @else if $level == 4 {
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
    } @else if $level == 5 {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
    }
}
